# Django Backend Setup for Family Bookkeeping
# GoDaddy Server Deployment Instructions

## 📁 File Structure to Create on GoDaddy Server

Create this directory structure on your GoDaddy server:
```
family_bookkeeping/
├── manage.py
├── requirements.txt
├── bookkeeping/
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   ├── wsgi.py
│   └── asgi.py
└── api/
    ├── __init__.py
    ├── models.py
    ├── views.py
    ├── urls.py
    ├── serializers.py
    └── admin.py
```

## 📄 File Contents

### 1. manage.py
```python
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys

def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bookkeeping.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)

if __name__ == '__main__':
    main()
```

### 2. requirements.txt
```
Django>=4.2.0
djangorestframework>=3.14.0
django-cors-headers>=4.3.0
djangorestframework-simplejwt>=5.3.0
```

### 3. bookkeeping/__init__.py
(Empty file)

### 4. bookkeeping/settings.py
```python
"""
Django settings for bookkeeping project.
"""

from pathlib import Path
import os

# Simple config function for development
def config(key, default=None, cast=None):
    return os.environ.get(key, default)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-change-this-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = ['208.109.215.53', 'localhost', '127.0.0.1']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'api',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bookkeeping.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bookkeeping.wsgi.application'

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
}

# JWT Settings
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:3001",
    "http://127.0.0.1:3001",
    "https://yourusername.github.io",  # Replace with your GitHub Pages URL
]

CORS_ALLOW_CREDENTIALS = True

# Security settings for production
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
```

### 5. bookkeeping/urls.py
```python
"""
URL configuration for bookkeeping project.
"""
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('api.urls')),
]

# Serve static files during development
if settings.DEBUG:
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
```

### 6. bookkeeping/wsgi.py
```python
"""
WSGI config for bookkeeping project.
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bookkeeping.settings')

application = get_wsgi_application()
```

### 7. bookkeeping/asgi.py
```python
"""
ASGI config for bookkeeping project.
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bookkeeping.settings')

application = get_asgi_application()
```

### 8. api/__init__.py
(Empty file)

### 9. api/models.py
```python
from django.db import models
from django.contrib.auth.models import User


class FamilyMember(models.Model):
    """Model for family members"""
    RELATION_CHOICES = [
        ('Self', 'Self'),
        ('Spouse', 'Spouse'),
        ('Child', 'Child'),
        ('Parent', 'Parent'),
        ('Sibling', 'Sibling'),
        ('Other', 'Other'),
    ]
    
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='family_members')
    name = models.CharField(max_length=100)
    relation = models.CharField(max_length=20, choices=RELATION_CHOICES)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['created_at']
        unique_together = ['user', 'name']
    
    def __str__(self):
        return f"{self.name} ({self.relation})"


class Expense(models.Model):
    """Model for tracking expenses"""
    family_member = models.ForeignKey(FamilyMember, on_delete=models.CASCADE, related_name='expenses')
    description = models.CharField(max_length=200)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.description} - ${self.amount}"


class Mile(models.Model):
    """Model for tracking miles"""
    family_member = models.ForeignKey(FamilyMember, on_delete=models.CASCADE, related_name='miles')
    description = models.CharField(max_length=200)
    miles = models.DecimalField(max_digits=8, decimal_places=2)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.description} - {self.miles} miles"


class Hour(models.Model):
    """Model for tracking hours"""
    family_member = models.ForeignKey(FamilyMember, on_delete=models.CASCADE, related_name='hours')
    description = models.CharField(max_length=200)
    hours = models.DecimalField(max_digits=6, decimal_places=2)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.description} - {self.hours} hours"
```

### 10. api/serializers.py
```python
from rest_framework import serializers
from django.contrib.auth.models import User
from .models import FamilyMember, Expense, Mile, Hour


class UserSerializer(serializers.ModelSerializer):
    """Serializer for User model"""
    class Meta:
        model = User
        fields = ['id', 'username', 'email', 'first_name', 'last_name']
        read_only_fields = ['id']


class FamilyMemberSerializer(serializers.ModelSerializer):
    """Serializer for FamilyMember model"""
    class Meta:
        model = FamilyMember
        fields = ['id', 'name', 'relation', 'created_at', 'updated_at']
        read_only_fields = ['id', 'created_at', 'updated_at']


class ExpenseSerializer(serializers.ModelSerializer):
    """Serializer for Expense model"""
    family_member_name = serializers.CharField(source='family_member.name', read_only=True)
    
    class Meta:
        model = Expense
        fields = ['id', 'description', 'amount', 'family_member', 'family_member_name', 'created_at', 'updated_at']
        read_only_fields = ['id', 'created_at', 'updated_at']


class MileSerializer(serializers.ModelSerializer):
    """Serializer for Mile model"""
    family_member_name = serializers.CharField(source='family_member.name', read_only=True)
    
    class Meta:
        model = Mile
        fields = ['id', 'description', 'miles', 'family_member', 'family_member_name', 'created_at', 'updated_at']
        read_only_fields = ['id', 'created_at', 'updated_at']


class HourSerializer(serializers.ModelSerializer):
    """Serializer for Hour model"""
    family_member_name = serializers.CharField(source='family_member.name', read_only=True)
    
    class Meta:
        model = Hour
        fields = ['id', 'description', 'hours', 'family_member', 'family_member_name', 'created_at', 'updated_at']
        read_only_fields = ['id', 'created_at', 'updated_at']


class UserRegistrationSerializer(serializers.ModelSerializer):
    """Serializer for user registration"""
    password = serializers.CharField(write_only=True, min_length=8)
    password_confirm = serializers.CharField(write_only=True)
    
    class Meta:
        model = User
        fields = ['username', 'email', 'first_name', 'last_name', 'password', 'password_confirm']
    
    def validate(self, attrs):
        if attrs['password'] != attrs['password_confirm']:
            raise serializers.ValidationError("Passwords don't match")
        return attrs
    
    def create(self, validated_data):
        validated_data.pop('password_confirm')
        user = User.objects.create_user(**validated_data)
        return user
```

### 11. api/views.py
```python
from rest_framework import generics, status
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from rest_framework_simplejwt.tokens import RefreshToken
from django.contrib.auth import authenticate
from django.contrib.auth.models import User
from django.db.models import Sum
from .models import FamilyMember, Expense, Mile, Hour
from .serializers import (
    UserSerializer, FamilyMemberSerializer, ExpenseSerializer, 
    MileSerializer, HourSerializer, UserRegistrationSerializer
)


@api_view(['POST'])
def register(request):
    """User registration endpoint"""
    serializer = UserRegistrationSerializer(data=request.data)
    if serializer.is_valid():
        user = serializer.save()
        
        # Create a family member record for the user
        FamilyMember.objects.create(
            user=user,
            name=f"{user.first_name} {user.last_name}".strip() or user.username,
            relation='Self'
        )
        
        # Generate tokens
        refresh = RefreshToken.for_user(user)
        return Response({
            'user': UserSerializer(user).data,
            'tokens': {
                'access': str(refresh.access_token),
                'refresh': str(refresh)
            }
        }, status=status.HTTP_201_CREATED)
    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


@api_view(['POST'])
def login(request):
    """User login endpoint"""
    username = request.data.get('username')
    password = request.data.get('password')
    
    if not username or not password:
        return Response({'error': 'Username and password required'}, status=status.HTTP_400_BAD_REQUEST)
    
    user = authenticate(username=username, password=password)
    if user:
        refresh = RefreshToken.for_user(user)
        return Response({
            'user': UserSerializer(user).data,
            'tokens': {
                'access': str(refresh.access_token),
                'refresh': str(refresh)
            }
        })
    return Response({'error': 'Invalid credentials'}, status=status.HTTP_401_UNAUTHORIZED)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def user_profile(request):
    """Get current user profile"""
    return Response(UserSerializer(request.user).data)


class FamilyMemberListCreateView(generics.ListCreateAPIView):
    """List and create family members"""
    serializer_class = FamilyMemberSerializer
    permission_classes = [IsAuthenticated]
    
    def get_queryset(self):
        return FamilyMember.objects.filter(user=self.request.user)
    
    def perform_create(self, serializer):
        serializer.save(user=self.request.user)


class FamilyMemberDetailView(generics.RetrieveUpdateDestroyAPIView):
    """Retrieve, update, or delete a family member"""
    serializer_class = FamilyMemberSerializer
    permission_classes = [IsAuthenticated]
    
    def get_queryset(self):
        return FamilyMember.objects.filter(user=self.request.user)


class ExpenseListCreateView(generics.ListCreateAPIView):
    """List and create expenses"""
    serializer_class = ExpenseSerializer
    permission_classes = [IsAuthenticated]
    
    def get_queryset(self):
        family_member_id = self.request.query_params.get('family_member_id')
        if family_member_id:
            return Expense.objects.filter(
                family_member__user=self.request.user,
                family_member_id=family_member_id
            )
        return Expense.objects.filter(family_member__user=self.request.user)
    
    def perform_create(self, serializer):
        family_member_id = self.request.data.get('family_member')
        family_member = FamilyMember.objects.get(
            id=family_member_id, 
            user=self.request.user
        )
        serializer.save(family_member=family_member)


class ExpenseDetailView(generics.RetrieveUpdateDestroyAPIView):
    """Retrieve, update, or delete an expense"""
    serializer_class = ExpenseSerializer
    permission_classes = [IsAuthenticated]
    
    def get_queryset(self):
        return Expense.objects.filter(family_member__user=self.request.user)


class MileListCreateView(generics.ListCreateAPIView):
    """List and create miles"""
    serializer_class = MileSerializer
    permission_classes = [IsAuthenticated]
    
    def get_queryset(self):
        family_member_id = self.request.query_params.get('family_member_id')
        if family_member_id:
            return Mile.objects.filter(
                family_member__user=self.request.user,
                family_member_id=family_member_id
            )
        return Mile.objects.filter(family_member__user=self.request.user)
    
    def perform_create(self, serializer):
        family_member_id = self.request.data.get('family_member')
        family_member = FamilyMember.objects.get(
            id=family_member_id, 
            user=self.request.user
        )
        serializer.save(family_member=family_member)


class MileDetailView(generics.RetrieveUpdateDestroyAPIView):
    """Retrieve, update, or delete a mile record"""
    serializer_class = MileSerializer
    permission_classes = [IsAuthenticated]
    
    def get_queryset(self):
        return Mile.objects.filter(family_member__user=self.request.user)


class HourListCreateView(generics.ListCreateAPIView):
    """List and create hours"""
    serializer_class = HourSerializer
    permission_classes = [IsAuthenticated]
    
    def get_queryset(self):
        family_member_id = self.request.query_params.get('family_member_id')
        if family_member_id:
            return Hour.objects.filter(
                family_member__user=self.request.user,
                family_member_id=family_member_id
            )
        return Hour.objects.filter(family_member__user=self.request.user)
    
    def perform_create(self, serializer):
        family_member_id = self.request.data.get('family_member')
        family_member = FamilyMember.objects.get(
            id=family_member_id, 
            user=self.request.user
        )
        serializer.save(family_member=family_member)


class HourDetailView(generics.RetrieveUpdateDestroyAPIView):
    """Retrieve, update, or delete an hour record"""
    serializer_class = HourSerializer
    permission_classes = [IsAuthenticated]
    
    def get_queryset(self):
        return Hour.objects.filter(family_member__user=self.request.user)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def statistics(request):
    """Get statistics for a family member"""
    family_member_id = request.query_params.get('family_member_id')
    
    if not family_member_id:
        return Response({'error': 'Family member ID is required'}, status=status.HTTP_400_BAD_REQUEST)
    
    try:
        family_member = FamilyMember.objects.get(
            id=family_member_id, 
            user=request.user
        )
    except FamilyMember.DoesNotExist:
        return Response({'error': 'Family member not found'}, status=status.HTTP_404_NOT_FOUND)
    
    # Calculate totals
    total_expenses = Expense.objects.filter(family_member=family_member).aggregate(
        total=Sum('amount')
    )['total'] or 0
    
    total_miles = Mile.objects.filter(family_member=family_member).aggregate(
        total=Sum('miles')
    )['total'] or 0
    
    total_hours = Hour.objects.filter(family_member=family_member).aggregate(
        total=Sum('hours')
    )['total'] or 0
    
    return Response({
        'total_expenses': float(total_expenses),
        'total_miles': float(total_miles),
        'total_hours': float(total_hours)
    })
```

### 12. api/urls.py
```python
from django.urls import path
from . import views

urlpatterns = [
    # Authentication endpoints
    path('auth/register/', views.register, name='register'),
    path('auth/login/', views.login, name='login'),
    path('auth/profile/', views.user_profile, name='user_profile'),
    
    # Family members endpoints
    path('family-members/', views.FamilyMemberListCreateView.as_view(), name='family_member_list'),
    path('family-members/<int:pk>/', views.FamilyMemberDetailView.as_view(), name='family_member_detail'),
    
    # Expenses endpoints
    path('expenses/', views.ExpenseListCreateView.as_view(), name='expense_list'),
    path('expenses/<int:pk>/', views.ExpenseDetailView.as_view(), name='expense_detail'),
    
    # Miles endpoints
    path('miles/', views.MileListCreateView.as_view(), name='mile_list'),
    path('miles/<int:pk>/', views.MileDetailView.as_view(), name='mile_detail'),
    
    # Hours endpoints
    path('hours/', views.HourListCreateView.as_view(), name='hour_list'),
    path('hours/<int:pk>/', views.HourDetailView.as_view(), name='hour_detail'),
    
    # Statistics endpoint
    path('statistics/', views.statistics, name='statistics'),
]
```

### 13. api/admin.py
```python
from django.contrib import admin
from .models import FamilyMember, Expense, Mile, Hour


@admin.register(FamilyMember)
class FamilyMemberAdmin(admin.ModelAdmin):
    list_display = ['name', 'relation', 'user', 'created_at']
    list_filter = ['relation', 'created_at']
    search_fields = ['name', 'user__username']


@admin.register(Expense)
class ExpenseAdmin(admin.ModelAdmin):
    list_display = ['description', 'amount', 'family_member', 'created_at']
    list_filter = ['created_at', 'family_member__relation']
    search_fields = ['description', 'family_member__name']


@admin.register(Mile)
class MileAdmin(admin.ModelAdmin):
    list_display = ['description', 'miles', 'family_member', 'created_at']
    list_filter = ['created_at', 'family_member__relation']
    search_fields = ['description', 'family_member__name']


@admin.register(Hour)
class HourAdmin(admin.ModelAdmin):
    list_display = ['description', 'hours', 'family_member', 'created_at']
    list_filter = ['created_at', 'family_member__relation']
    search_fields = ['description', 'family_member__name']
```

## 🚀 Deployment Instructions for GoDaddy Server

### Step 1: Create Directory Structure
```bash
mkdir -p family_bookkeeping/bookkeeping
mkdir -p family_bookkeeping/api
```

### Step 2: Create All Files
Copy each file content above into the corresponding files on your GoDaddy server.

### Step 3: Install Dependencies
```bash
cd family_bookkeeping
pip install -r requirements.txt
```

### Step 4: Run Django Commands
```bash
python manage.py makemigrations
python manage.py migrate
python manage.py createsuperuser
python manage.py collectstatic
```

### Step 5: Configure GoDaddy Server
Update your GoDaddy server configuration to serve the Django application on port 3015.

### Step 6: Test API Endpoints
Your API will be available at:
- `http://208.109.215.53:3015/api/auth/register/`
- `http://208.109.215.53:3015/api/auth/login/`
- `http://208.109.215.53:3015/api/family-members/`
- `http://208.109.215.53:3015/api/expenses/`
- `http://208.109.215.53:3015/api/miles/`
- `http://208.109.215.53:3015/api/hours/`
- `http://208.109.215.53:3015/api/statistics/`

## 🔧 Environment Variables (Optional)
Create a `.env` file on your GoDaddy server:
```
SECRET_KEY=your-production-secret-key
DEBUG=False
ALLOWED_HOSTS=208.109.215.53,localhost,127.0.0.1
```

## ✅ Verification
After deployment, test these endpoints:
1. `GET http://208.109.215.53:3015/api/` - Should return API information
2. `POST http://208.109.215.53:3015/api/auth/register/` - Test user registration
3. `POST http://208.109.215.53:3015/api/auth/login/` - Test user login

Your Family Bookkeeping Django backend will be ready to serve your GitHub Pages frontend! 🚀
