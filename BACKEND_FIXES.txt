# Django Backend Authentication Fixes

## ðŸ”§ Critical Fixes for Family Bookkeeping Backend

### 1. Updated api/views.py (Authentication Fixes)

```python
from rest_framework import generics, status
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated, AllowAny
from rest_framework.response import Response
from rest_framework_simplejwt.tokens import RefreshToken
from django.contrib.auth import authenticate
from django.contrib.auth.models import User
from django.db.models import Sum
from .models import FamilyMember, Expense, Mile, Hour
from .serializers import (
    UserSerializer, FamilyMemberSerializer, ExpenseSerializer, 
    MileSerializer, HourSerializer, UserRegistrationSerializer
)


@api_view(['POST'])
@permission_classes([AllowAny])  # FIXED: Allow public registration
def register(request):
    """User registration endpoint"""
    try:
        serializer = UserRegistrationSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.save()
            
            # Create a family member record for the user
            FamilyMember.objects.create(
                user=user,
                name=f"{user.first_name} {user.last_name}".strip() or user.username,
                relation='Self'
            )
            
            # Generate tokens
            refresh = RefreshToken.for_user(user)
            return Response({
                'user': UserSerializer(user).data,
                'tokens': {
                    'access': str(refresh.access_token),
                    'refresh': str(refresh)
                }
            }, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    except Exception as e:
        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['POST'])
@permission_classes([AllowAny])  # FIXED: Allow public login
def login(request):
    """User login endpoint"""
    try:
        username = request.data.get('username')
        password = request.data.get('password')
        
        if not username or not password:
            return Response({'error': 'Username and password required'}, status=status.HTTP_400_BAD_REQUEST)
        
        user = authenticate(username=username, password=password)
        if user:
            refresh = RefreshToken.for_user(user)
            return Response({
                'user': UserSerializer(user).data,
                'tokens': {
                    'access': str(refresh.access_token),
                    'refresh': str(refresh)
                }
            })
        return Response({'error': 'Invalid credentials'}, status=status.HTTP_401_UNAUTHORIZED)
    except Exception as e:
        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def user_profile(request):
    """Get current user profile"""
    return Response(UserSerializer(request.user).data)


# FIXED: All other views remain with IsAuthenticated
class FamilyMemberListCreateView(generics.ListCreateAPIView):
    """List and create family members"""
    serializer_class = FamilyMemberSerializer
    permission_classes = [IsAuthenticated]
    
    def get_queryset(self):
        return FamilyMember.objects.filter(user=self.request.user)
    
    def perform_create(self, serializer):
        serializer.save(user=self.request.user)


class FamilyMemberDetailView(generics.RetrieveUpdateDestroyAPIView):
    """Retrieve, update, or delete a family member"""
    serializer_class = FamilyMemberSerializer
    permission_classes = [IsAuthenticated]
    
    def get_queryset(self):
        return FamilyMember.objects.filter(user=self.request.user)


class ExpenseListCreateView(generics.ListCreateAPIView):
    """List and create expenses"""
    serializer_class = ExpenseSerializer
    permission_classes = [IsAuthenticated]
    
    def get_queryset(self):
        family_member_id = self.request.query_params.get('family_member_id')
        if family_member_id:
            return Expense.objects.filter(
                family_member__user=self.request.user,
                family_member_id=family_member_id
            )
        return Expense.objects.filter(family_member__user=self.request.user)
    
    def perform_create(self, serializer):
        family_member_id = self.request.data.get('family_member')
        family_member = FamilyMember.objects.get(
            id=family_member_id, 
            user=self.request.user
        )
        serializer.save(family_member=family_member)


class ExpenseDetailView(generics.RetrieveUpdateDestroyAPIView):
    """Retrieve, update, or delete an expense"""
    serializer_class = ExpenseSerializer
    permission_classes = [IsAuthenticated]
    
    def get_queryset(self):
        return Expense.objects.filter(family_member__user=self.request.user)


class MileListCreateView(generics.ListCreateAPIView):
    """List and create miles"""
    serializer_class = MileSerializer
    permission_classes = [IsAuthenticated]
    
    def get_queryset(self):
        family_member_id = self.request.query_params.get('family_member_id')
        if family_member_id:
            return Mile.objects.filter(
                family_member__user=self.request.user,
                family_member_id=family_member_id
            )
        return Mile.objects.filter(family_member__user=self.request.user)
    
    def perform_create(self, serializer):
        family_member_id = self.request.data.get('family_member')
        family_member = FamilyMember.objects.get(
            id=family_member_id, 
            user=self.request.user
        )
        serializer.save(family_member=family_member)


class MileDetailView(generics.RetrieveUpdateDestroyAPIView):
    """Retrieve, update, or delete a mile record"""
    serializer_class = MileSerializer
    permission_classes = [IsAuthenticated]
    
    def get_queryset(self):
        return Mile.objects.filter(family_member__user=self.request.user)


class HourListCreateView(generics.ListCreateAPIView):
    """List and create hours"""
    serializer_class = HourSerializer
    permission_classes = [IsAuthenticated]
    
    def get_queryset(self):
        family_member_id = self.request.query_params.get('family_member_id')
        if family_member_id:
            return Hour.objects.filter(
                family_member__user=self.request.user,
                family_member_id=family_member_id
            )
        return Hour.objects.filter(family_member__user=self.request.user)
    
    def perform_create(self, serializer):
        family_member_id = self.request.data.get('family_member')
        family_member = FamilyMember.objects.get(
            id=family_member_id, 
            user=self.request.user
        )
        serializer.save(family_member=family_member)


class HourDetailView(generics.RetrieveUpdateDestroyAPIView):
    """Retrieve, update, or delete an hour record"""
    serializer_class = HourSerializer
    permission_classes = [IsAuthenticated]
    
    def get_queryset(self):
        return Hour.objects.filter(family_member__user=self.request.user)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def statistics(request):
    """Get statistics for a family member"""
    family_member_id = request.query_params.get('family_member_id')
    
    if not family_member_id:
        return Response({'error': 'Family member ID is required'}, status=status.HTTP_400_BAD_REQUEST)
    
    try:
        family_member = FamilyMember.objects.get(
            id=family_member_id, 
            user=request.user
        )
    except FamilyMember.DoesNotExist:
        return Response({'error': 'Family member not found'}, status=status.HTTP_404_NOT_FOUND)
    
    # Calculate totals
    total_expenses = Expense.objects.filter(family_member=family_member).aggregate(
        total=Sum('amount')
    )['total'] or 0
    
    total_miles = Mile.objects.filter(family_member=family_member).aggregate(
        total=Sum('miles')
    )['total'] or 0
    
    total_hours = Hour.objects.filter(family_member=family_member).aggregate(
        total=Sum('hours')
    )['total'] or 0
    
    return Response({
        'total_expenses': float(total_expenses),
        'total_miles': float(total_miles),
        'total_hours': float(total_hours)
    })
```

### 2. Updated api/urls.py (Fixed Endpoints)

```python
from django.urls import path
from . import views

urlpatterns = [
    # Authentication endpoints (AllowAny)
    path('auth/register/', views.register, name='register'),
    path('auth/login/', views.login, name='login'),
    path('auth/profile/', views.user_profile, name='user_profile'),
    
    # Family members endpoints (IsAuthenticated)
    path('family-members/', views.FamilyMemberListCreateView.as_view(), name='family_member_list'),
    path('family-members/<int:pk>/', views.FamilyMemberDetailView.as_view(), name='family_member_detail'),
    
    # Expenses endpoints (IsAuthenticated)
    path('expenses/', views.ExpenseListCreateView.as_view(), name='expense_list'),
    path('expenses/<int:pk>/', views.ExpenseDetailView.as_view(), name='expense_detail'),
    
    # Miles endpoints (IsAuthenticated)
    path('miles/', views.MileListCreateView.as_view(), name='mile_list'),
    path('miles/<int:pk>/', views.MileDetailView.as_view(), name='mile_detail'),
    
    # Hours endpoints (IsAuthenticated)
    path('hours/', views.HourListCreateView.as_view(), name='hour_list'),
    path('hours/<int:pk>/', views.HourDetailView.as_view(), name='hour_detail'),
    
    # Statistics endpoint (IsAuthenticated)
    path('statistics/', views.statistics, name='statistics'),
]
```

### 3. Updated Django Settings (CORS Fix)

```python
# In bookkeeping/settings.py - Add these CORS settings:

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "https://zub165.github.io",  # Your GitHub Pages domain
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:3001",
    "http://127.0.0.1:3001",
]

CORS_ALLOW_CREDENTIALS = True

# Additional CORS settings for better compatibility
CORS_ALLOW_ALL_ORIGINS = False  # Keep this False for security
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
```

## ðŸš€ Deployment Steps

### 1. Update Your Django Backend
Replace the files on your server with the corrected versions above.

### 2. Restart Django Backend
```bash
# On your GoDaddy server
pm2 restart family-bookkeeping
# or
python manage.py runserver 3017
```

### 3. Test the Endpoints
```bash
# Test registration
curl -X POST https://api.mywaitime.com/family-api/auth/register/ \
  -H "Content-Type: application/json" \
  -d '{"username":"test","email":"test@example.com","first_name":"Test","last_name":"User","password":"testpass123","password_confirm":"testpass123"}'

# Test login
curl -X POST https://api.mywaitime.com/family-api/auth/login/ \
  -H "Content-Type: application/json" \
  -d '{"username":"test","password":"testpass123"}'
```

## âœ… Expected Results

After applying these fixes:
- âœ… **Registration will work** without authentication errors
- âœ… **Login will work** without authentication errors  
- âœ… **CORS errors will be resolved**
- âœ… **Frontend will connect successfully**
- âœ… **All API endpoints will be accessible**

## ðŸŽ¯ Summary of Fixes

1. **Authentication**: Added `@permission_classes([AllowAny])` to register/login
2. **Error Handling**: Added try/catch blocks for better error responses
3. **CORS**: Updated CORS settings for GitHub Pages domain
4. **URLs**: Ensured all endpoints are properly configured

Your Family Bookkeeping app should now work perfectly! ðŸš€
